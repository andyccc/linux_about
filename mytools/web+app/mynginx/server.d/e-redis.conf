location /get_redis{
  internal;
  set_unescape_uri $key $arg_key;
  redis2_query hgetall $key;
  redis2_pass redis_pool;
}

location /json {
  content_by_lua '
    local json = require("cjson")
    local parser = require("redis.parser")
    --子请求分享变量 share_all_vars = true
    local res = ngx.location.capture("/get_redis",{
        args = { key = ngx.var.arg_key },
        share_all_vars = true
        })
    if res.status == 200 then
      reply = parser.parse_reply(res.body)
      value = json.encode(reply)
      ngx.say(value)
      a = json.decode(value)
      ngx.say(a[2])
    end
  ';

  default_type   text/html;
}


#todo bind redis-server static ip
location = /redisfoo {
  set $value 'first';
  redis2_query set one $value;
  redis2_pass redis_pool;

  default_type   text/html;
}

# GET /get?key=one
location = /redisget {
  set_unescape_uri $key $arg_key;  # this requires ngx_set_misc
  redis2_query get $key;
  redis2_pass redis_pool;

  default_type   text/html;
}

# GET /set?key=one&val=first%20value
location = /redisset {
  set_unescape_uri $key $arg_key;  # this requires ngx_set_misc
  set_unescape_uri $val $arg_val;  # this requires ngx_set_misc
  redis2_query set $key $val;
  redis2_pass redis_pool;

  default_type   text/html;
}