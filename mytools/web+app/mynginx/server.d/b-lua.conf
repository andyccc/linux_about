location /hello {
  default_type 'text/plain';
  content_by_lua 'ngx.say("hello, lua")';
}

#在lua代码中可以实现所有复杂的逻辑，但是要执行速度很快，不要阻塞；
#/lua_set_1?i=1&j=10
location /lua_set_1 {
        default_type "text/html";
        set_by_lua_file $num /usr/local/nginx/conf/lua.d/test_set_1.lua;
        echo $num;
}

#/lua_access?token=234将得到403 Forbidden的响应。根据如cookie/用户token来决定是否有访问权限。
location /lua_access {
        default_type "text/html";
        access_by_lua_file /usr/local/nginx/conf/lua.d/test_access.lua;
        echo "access";
}

#对于请求我们需要获取如请求参数、请求头、Body体等信息；而对于处理就是调用相应的Lua代码即可；输出响应需要进行响应状态码、响应头和响应内容体的输出
#wget --post-data 'a=1&b=2' 'http://192.168.99.101/lua_request/1/2?a=3&b=4' -O -
location ~ /lua_request/(\d+)/(\d+) {
  #设置nginx变量
  set $a $1;
  set $b $host;
  default_type "text/html";
  #nginx内容处理
  content_by_lua_file /usr/local/nginx/conf/lua.d/test_request.lua;
  #内容体处理完成后调用
  echo_after_body "ngx.var.b $b";
}


location /lua_response_1 {
        default_type "text/html";
        content_by_lua_file /usr/local/nginx/conf/lua.d/test_response_1.lua;
}

location /lua_response_2 {
        default_type "text/html";
        content_by_lua_file /usr/local/nginx/conf/lua.d/test_response_2.lua;
}

location /lua_other {
        default_type "text/html";
        content_by_lua_file /usr/local/nginx/conf/lua.d/test_other.lua;
}

location /lua_shared_dict {
        default_type "text/html";
        content_by_lua_file /usr/local/nginx/conf/lua.d/test_lua_shared_dict.lua;
}


#灰度发布，A/B选择
#我们想把商品编号为为8位(比如品类为图书的)没有改版完成，需要按照相应规则跳转到老版，但是其他的到新版；
#http://192.168.99.101/apiversion?skuId=123
#http://192.168.99.101/apiversion?skuId=123456789
#http://192.168.99.101/apiversion?skuId=12345678
location = /apiversion {
############ 测试时使用的动态请求


        set_by_lua $skuId '
            return ngx.req.get_uri_args()["skuId"]
        ';
        set_by_lua $to_book '
          local ngx_match = ngx.re.match
          local var = ngx.var
          local skuId = var.skuId
          local r = var.item_dynamic ~= "1" and ngx.re.match(skuId, "^[0-9]{8}$")
          if r then return "1" else return "0" end;
        ';

        set_by_lua $to_mvd '
          local ngx_match = ngx.re.match
          local var = ngx.var
          local skuId = var.skuId
          local r = var.item_dynamic ~= "1" and ngx.re.match(skuId, "^[0-9]{9}$")
          if r then return "1" else return "0" end;
        ';

        #自营图书
        if ($to_book) {
            proxy_pass http://127.0.0.1/old_book/$skuId.html;
        }

        #自营音像
        if ($to_mvd) {
            proxy_pass http://127.0.0.1/old_mvd/$skuId.html;
        }

        #默认
        proxy_pass http://127.0.0.1/proxy/$skuId.html;

}

location = /old_book {

}

location = /old_mvd {

}

location = /proxy {

}

#first match ngx location
set $template_location "/templates";
#then match root read file
#set $template_root "/usr/local/nginx/conf/lua.d/templates";

location /templates {
     internal;
     alias /data/www/templates;
}


#模板引擎
location /lua_template {
    default_type 'text/html';
    content_by_lua_file /usr/local/nginx/conf/lua.d/test_template.lua;
}


location /lua_template_1 {
    default_type 'text/html';
    content_by_lua_file /usr/local/nginx/conf/lua.d/test_template_1.lua;
}

location /lua_template_2 {
    default_type 'text/html';
    content_by_lua_file /usr/local/nginx/conf/lua.d/test_template_2.lua;
}

location /lua_template_3 {
    default_type 'text/html';
    content_by_lua_file /usr/local/nginx/conf/lua.d/test_template_3.lua;
}


location /test_template_view_layouts {
    default_type 'text/html';
    content_by_lua_file /usr/local/nginx/conf/lua.d/test_template_view_layouts.lua;
}