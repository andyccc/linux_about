#前端信息获取
location = /api {

  default_type 'text/plain';

  error_log  logs/error-api.log  debug;
  #error_log  logs/error-api.log  error;

  proxy_http_version 1.1;
  proxy_set_header Connection "Keep-Alive";
  proxy_set_header Proxy-Connection "Keep-Alive";

  client_max_body_size 30m;



  #1.set指令一样用于设置Nginx变量并且在rewrite阶段执行，只不过这个变量是由lua脚本计算并返回的。
  set_by_lua $a 'ngx.log(ngx.DEBUG, "set_by_lua")';
  #curl 'localhost/api?a=25&b=75
  #set_by_lua_file $res "conf/lua.d/1-adder.lua" $arg_n;
  #echo $res;

  #2.实现url重写，在rewrite阶段执行
  #rewrite_by_lua 'ngx.exec("/bar")';
  rewrite_by_lua 'ngx.log(ngx.DEBUG, "rewrite_by_lua")';

  #3.运行在access阶段，用于访问控制。Nginx原生的allow和deny是基于ip的，通过access_by_lua能完成复杂的访问控制，比如，访问数据库进行用户名、密码验证等。
  #curl 'localhost/auth?user=foo'
  #access_by_lua 'ngx.log(ngx.DEBUG, "access_by_lua")';
  access_by_lua_file "conf/lua.d/3-auth.lua";

  #4.Contenthandler在content阶段执行，生成http响应。由于content阶段只能有一个handler，所以在与echo模块使用时，不能同时生效，测试的结果是content_by_lua会覆盖echo。
  #content_by_lua 'ngx.log(ngx.DEBUG, "content_by_lua")';”
  #content_by_lua 'local who = ngx.var.arg_who
  #                ngx.say("Hello, ", who, "!")';
  # 并发执行,最长路径
  # content_by_lua '
  #local res1, res2, res3 =
  #  ngx.location.capture_multi{
  #  {"/memc"}, {"/mysql"}, {"/postgres"}
  #             }
  #         ngx.say(res1.body, res2.body, res3.body)
  #     ';
  #content_by_lua_file   '/usr/local/nginx/conf/lua.d/1-channel-auth.lua';
  content_by_lua_file   '/usr/local/nginx/conf/lua.d/4-api.lua';

  #5 一般只用于设置Cookie和Headers等,该阶段不能运行Output API、Control API、Subrequest API、Cosocket API
  header_filter_by_lua 'ngx.log(ngx.DEBUG, "header_filter_by_lua")';
  #6 一般会在一次请求中被调用多次, 因为这是实现基于 HTTP 1.1 chunked 编码的所谓“流式输出”的。该阶段不能运行Output API、Control API、Subrequest API、Cosocket API
  #通过body_filter_by_lua，可以对 http 输出( ngx.arg[1])进行处理，从而达到附加css文件的目的。
  #local b = ngx.arg[1]
  #ngx.arg[1] = string.gsub( b, "(<head>)", "%1 <link type=\\"text/css\\" rel=\'stylesheet\' href=\'/sqlite/css.css\'/>")
  #再通过
  #echo_after_body
  #就可以方便地在结束之后，附加js代码:
  #  set $append_js "<script src='/bootstrap/js/sqlite.js'></script>";
  #echo_after_body $append_js;
  body_filter_by_lua 'ngx.log(ngx.DEBUG, "body_filter_by_lua")';
  #7
  log_by_lua_file '/usr/local/nginx/conf/lua.d/7-log.lua';
  #8
  #timer

}



location = /apitest {
    default_type 'text/plain';

    content_by_lua '
        local myconfig = ngx.shared.myconfig;
        ngx.say(myconfig:get("Tom"))

        ngx.say(myconfig:get("redis-host"))
        ngx.say(myconfig:get("redis-port"))

        ngx.say(myconfig:get("host"))
        ngx.say(myconfig:get("port"))

        ngx.say(cjson.encode({dog = 5, cat = 6}))
    ';
}
